name: Linux

on:
  pull_request:
  push:
  release:
    types: published

jobs:
  CentOS_CMake:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        config: [Release, Debug]

    container:
      image: centos:7

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - uses: codespell-project/actions-codespell@master
      with:
        ignore_words_list: fo,wee

    - name: Install dependencies
      run: |
        curl -L -O https://github.com/Kitware/CMake/releases/download/v3.15.7/cmake-3.15.7-Linux-x86_64.sh
        chmod +x cmake-3.15.7-Linux-x86_64.sh
        ./cmake-3.15.7-Linux-x86_64.sh --skip-license --prefix=/usr/local
        yum install -y make gcc-c++ libasan

    - name: Configure
      env:
        CFLAGS:   ${{ matrix.config == 'Debug' && '-fstack-protector-all -fsanitize=address' || '' }}
        CXXFLAGS: ${{ matrix.config == 'Debug' && '-fstack-protector-all -fsanitize=address' || '' }}
        LDFLAGS:  ${{ matrix.config == 'Debug' && '-fsanitize=address' || '' }}
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }} -B build

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Test
      working-directory: build
      run: |
        ctest --schedule-random --progress --output-on-failure --parallel --no-tests error --build-config ${{ matrix.config }}


  CentOS_Python:
    runs-on: ubuntu-latest

    container:
      image: centos:7

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: |
        curl -L -O https://github.com/Kitware/CMake/releases/download/v3.15.7/cmake-3.15.7-Linux-x86_64.sh
        chmod +x cmake-3.15.7-Linux-x86_64.sh
        ./cmake-3.15.7-Linux-x86_64.sh --skip-license --prefix=/usr/local
        yum install -y make gcc-c++ python3

    - name: Bootstrap
      run: |
        python3 configure.py --bootstrap

    - name: Build
      run: |
        ./ninja all

    - name: Test
      run: |
        ./ninja_test --gtest_filter=-SubprocessTest.SetWithLots
        python3 misc/ninja_syntax_test.py
        ./misc/output_test.py


  Ubuntu_CMake:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image: ['ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04']
        compiler: [gcc, clang]
        config: [Release, Debug]

    container:
      image: ${{ matrix.image }}

    env:
      CC:  ${{ matrix.compiler == 'gcc' && 'gcc' || 'clang'   }}
      CXX: ${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: |
        apt update
        apt install -y make clang re2c python3-pip
        pip3 install cmake==3.15.*

    - name: Mkdir build
      run: |
        mkdir build

    - name: Configure
      working-directory: build
      run: |
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.config }}

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Test
      working-directory: build
      run: |
        ctest --schedule-random --progress --output-on-failure --parallel --no-tests error --build-config ${{ matrix.config }}
        python3 ../misc/ninja_syntax_test.py
        ../misc/output_test.py


  Ubuntu_Python:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image: ['ubuntu:16.04', 'ubuntu:18.04', 'ubuntu:20.04']

    container:
      image: ${{ matrix.image }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: |
        apt update
        apt install -y g++ python3

    - name: Bootstrap
      run: |
        python3 configure.py --bootstrap

    - name: Build
      run: |
        ./ninja all

    - name: Test
      run: |
        ./ninja_test --gtest_filter=-SubprocessTest.SetWithLots
        python3 misc/ninja_syntax_test.py
        ./misc/output_test.py


  Release:
    runs-on: ubuntu-latest
    if: github.event.action == 'published'
    needs: [CentOS_CMake, CentOS_Python, Ubuntu_CMake, Ubuntu_Python]

    container:
      image: centos:7

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: |
        curl -L -O https://github.com/Kitware/CMake/releases/download/v3.15.7/cmake-3.15.7-Linux-x86_64.sh
        chmod +x cmake-3.15.7-Linux-x86_64.sh
        ./cmake-3.15.7-Linux-x86_64.sh --skip-license --prefix=/usr/local
        curl -L -O https://www.mirrorservice.org/sites/dl.fedoraproject.org/pub/epel/7/x86_64/Packages/p/p7zip-16.02-20.el7.x86_64.rpm
        curl -L -O https://www.mirrorservice.org/sites/dl.fedoraproject.org/pub/epel/7/x86_64/Packages/p/p7zip-plugins-16.02-20.el7.x86_64.rpm
        rpm -U --quiet p7zip-16.02-20.el7.x86_64.rpm
        rpm -U --quiet p7zip-plugins-16.02-20.el7.x86_64.rpm
        yum install -y make gcc-c++

    - name: Configure
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release -B build

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Strip
      run: |
        strip build/ninja

    - name: Create archive
      run: |
        mkdir artifact
        7z a artifact/ninja-linux.zip ./build/ninja

    # Upload ninja binary archive as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: ninja-binary-archives
        path: artifact

    - name: Upload release asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./artifact/ninja-linux.zip
        asset_name: ninja-linux.zip
        asset_content_type: application/zip

